services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  mongo:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  admin-service:
    build:
      context: .
      dockerfile: ./admin-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "5001:5001"
    environment:
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@uber.dvdc9fh.mongodb.net/?retryWrites=true&w=majority&appName=Uber
      REDIS_URL: redis://redis:6379
      SERVICE_PORT: 5001
      SERVICE_NAME: admin-service
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    env_file:
      - ./admin-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  customer-service:
    build:
      context: .
      dockerfile: ./customer-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "5002:5002"
    environment:
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@uber.dvdc9fh.mongodb.net/?retryWrites=true&w=majority&appName=Uber
      REDIS_URL: redis://redis:6379
      SERVICE_PORT: 5002
      SERVICE_NAME: customer-service
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    env_file:
      - ./customer-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  
  billing-service:
    build:
      context: .
      dockerfile: ./billing-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "5004:5004"
    environment:
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@uber.dvdc9fh.mongodb.net/?retryWrites=true&w=majority&appName=Uber
      REDIS_URL: redis://redis:6379
      SERVICE_PORT: 5004
      SERVICE_NAME: driver-service
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    env_file:
      - ./billing-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

driver-service:
    build:
      context: .
      dockerfile: ./driver-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "5003:5003"
    environment:
      KAFKA_BROKERS: kafka:9092
      MONGO_URI: mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@uber.dvdc9fh.mongodb.net/?retryWrites=true&w=majority&appName=Uber
      REDIS_URL: redis://redis:6379
      SERVICE_PORT: 5003
      SERVICE_NAME: driver-service
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    env_file:
      - ./driver-service/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped